----------------------------------------------SDK- TARGET AND MINIMUM---------------------------------------------------------
When you create a new project, you need to define a minimum SDK, or Software Development Kit. The SDK is a set of tools that you download that allows you to compile and create Android Projects. SDKs match API levels, when a new API level is released, a new SDK is released to make projects for that level. A current SDK is automatically downloaded when you install Android Studio.

The minimum SDK is the minimum Android API level that the application is meant to support. In our case we are supporting API level 10, which includes all devices running Gingerbread and beyond. This will support 99% of devices on the market.

The target SDK, which is automatically defined for you, signifies the SDK that you use to compile and test with. It should be the most current SDK.
----------------------------------------------LISTVIEW---------------------------------------------------------
Listview is very efficient in how it creates, recycles and displays views and is optimized to scroll very smoothly.
Suppose we have 20 items in the listview and could only show 10 on the screen at any given point in time, the listview creates 12
in total, 10 on screen and 2 off-screen (one top and one bottom). Once we scroll down or up, the view that is out of range of these 12,
will then be recycled and made only when we need to show it. All children of AdapterView has this recycling feature (like GridView)
----------------------------------------------LAYOUTS---------------------------------------------------------
There are 3 most popular Layouts that are used:
1. FrameLayout
	-Simple, should only be used if there's only 1 child in the layout
2. LinearLayout
	-Used commonly if there are many children in layouts and you need a proportional size for each child
3. RelativeLayout
	-Used also for many children but more powerful, you can move them around where-ever you want to


----------------------------------------------TROUBLE SHOOT---------------------------------------------------------
1. If there are any trouble building from an imported project from github or zip, FIRST observation should be into gradle.
It has been 1 year and a half (as of today) since this course was created, android studio & gradle will definitely be outdated.
Ensure that the gradle version in build.gradle and gradle-wrapper.properties are up-to-date. 

2. Android Studio is already convenient to use for launching our code to our devices. However, if we decide to somehow change to command line prompts,
you would need to go to the root of the project then you need to run:

    chmod +x gradlew - This command only needs to be run once and is used to give gradlew the correct execute permissions.
    ./gradlew assembleDebug - This command will compile the code.
    adb install -r app/build/outputs/apk/app-debug-unaligned.apk - This command will install the APK. With the -r flag it will overwrite any prior installed versions. Note if you have more than one device, you will need to use the -s flag right after adb to specify the serial number of the intended device.
    adb shell am start -n com.example.android.sunshine.app/com.example.android.sunshine.app.MainActivity - This command will actually run the app.